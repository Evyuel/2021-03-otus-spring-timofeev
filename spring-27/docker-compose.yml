version: '3'

services:
  producer-app:
    build:
      context: ./producer-app
    environment:
      - DBHOSTNAME=${DBHOSTNAME}
      - DBPRODUCERNAME=${DBPRODUCERNAME}
      - KAFKA_HOST=${KAFKA_HOST}
    ports:
     - 8080:8080
    networks:
      - producer_network
    depends_on: 
      - db

  consumer-app:
    build:
      context: ./consumer-app
    environment:
      - DBHOSTNAME=${DBHOSTNAME}
      - DBCONSUMERNAME=${DBCONSUMERNAME}
      - KAFKA_HOST=${KAFKA_HOST}
    ports:
     - 8081:8081
    networks:
      - consumer_network
    depends_on: 
      - db
  db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_MULTIPLE_DATABASES=${DBPRODUCERNAME},${DBCONSUMERNAME}
      - POSTGRES_PASSWORD=12345
      - POSTGRES_USER=postgres
    hostname: ${DBHOSTNAME}
    ports:
      - 5432:5432
    networks:
      - producer_network
      - consumer_network
    volumes:
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d


  zookeeper:
    image: wurstmeister/zookeeper
    expose:
      - 2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka_network
  kafka:
    image: wurstmeister/kafka
    ports:
      - 9092:9092
    hostname: ${KAFKA_HOST}
    expose:
      - 9093
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ADVERTISED_LISTENERS: INSIDE://${KAFKA_HOST}:9093,OUTSIDE://${KAFKA_HOST}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:SASL_PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
    depends_on:
      - zookeeper
    volumes:
      - ./:/etc/kafka
    networks:
      - kafka_network
      - producer_network
      - consumer_network
networks:
  producer_network: 
    driver: bridge
  consumer_network: 
    driver: bridge
  kafka_network: 
    driver: bridge